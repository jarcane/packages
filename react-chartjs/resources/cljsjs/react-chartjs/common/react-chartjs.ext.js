var window["react-chartjs"] = {
  "Bar": {
    "displayName": {}
  },
  "Doughnut": {
    "displayName": {}
  },
  "Line": {
    "displayName": {}
  },
  "Pie": {
    "displayName": {}
  },
  "PolarArea": {
    "displayName": {}
  },
  "Radar": {
    "displayName": {}
  },
  "createClass": function () {}
};
window["react-chartjs"].Bar.prototype = {
  "constructor": function () {},
  "__reactAutoBindPairs": function () {},
  "getInitialState": function () {},
  "render": function () {},
  "componentDidMount": function () {},
  "componentWillUnmount": function () {},
  "componentWillReceiveProps": function () {},
  "initializeChart": function () {},
  "getChart": function () {},
  "getCanvass": function () {},
  "getCanvas": function () {},
  "clear": function () {},
  "stop": function () {},
  "resize": function () {},
  "toBase64Image": function () {},
  "generateLegend": function () {},
  "update": function () {},
  "addData": function () {},
  "removeData": function () {},
  "getBarsAtEvent": function () {},
  "mixins": function () {},
  "statics": function () {},
  "propTypes": function () {},
  "contextTypes": function () {},
  "childContextTypes": function () {},
  "getDefaultProps": function () {},
  "getChildContext": function () {},
  "componentWillMount": function () {},
  "shouldComponentUpdate": function () {},
  "componentWillUpdate": function () {},
  "componentDidUpdate": function () {},
  "updateComponent": function () {},
  "isReactComponent": function () {},
  "setState": function () {},
  "forceUpdate": function () {},
  "replaceState": function () {},
  "isMounted": function () {}
};
window["react-chartjs"].Doughnut.prototype = {
  "constructor": function () {},
  "__reactAutoBindPairs": function () {},
  "getInitialState": function () {},
  "render": function () {},
  "componentDidMount": function () {},
  "componentWillUnmount": function () {},
  "componentWillReceiveProps": function () {},
  "initializeChart": function () {},
  "getChart": function () {},
  "getCanvass": function () {},
  "getCanvas": function () {},
  "clear": function () {},
  "stop": function () {},
  "resize": function () {},
  "toBase64Image": function () {},
  "generateLegend": function () {},
  "update": function () {},
  "addData": function () {},
  "removeData": function () {},
  "getSegmentsAtEvent": function () {},
  "mixins": function () {},
  "statics": function () {},
  "propTypes": function () {},
  "contextTypes": function () {},
  "childContextTypes": function () {},
  "getDefaultProps": function () {},
  "getChildContext": function () {},
  "componentWillMount": function () {},
  "shouldComponentUpdate": function () {},
  "componentWillUpdate": function () {},
  "componentDidUpdate": function () {},
  "updateComponent": function () {},
  "isReactComponent": function () {},
  "setState": function () {},
  "forceUpdate": function () {},
  "replaceState": function () {},
  "isMounted": function () {}
};
window["react-chartjs"].Line.prototype = {
  "constructor": function () {},
  "__reactAutoBindPairs": function () {},
  "getInitialState": function () {},
  "render": function () {},
  "componentDidMount": function () {},
  "componentWillUnmount": function () {},
  "componentWillReceiveProps": function () {},
  "initializeChart": function () {},
  "getChart": function () {},
  "getCanvass": function () {},
  "getCanvas": function () {},
  "clear": function () {},
  "stop": function () {},
  "resize": function () {},
  "toBase64Image": function () {},
  "generateLegend": function () {},
  "update": function () {},
  "addData": function () {},
  "removeData": function () {},
  "getPointsAtEvent": function () {},
  "mixins": function () {},
  "statics": function () {},
  "propTypes": function () {},
  "contextTypes": function () {},
  "childContextTypes": function () {},
  "getDefaultProps": function () {},
  "getChildContext": function () {},
  "componentWillMount": function () {},
  "shouldComponentUpdate": function () {},
  "componentWillUpdate": function () {},
  "componentDidUpdate": function () {},
  "updateComponent": function () {},
  "isReactComponent": function () {},
  "setState": function () {},
  "forceUpdate": function () {},
  "replaceState": function () {},
  "isMounted": function () {}
};
window["react-chartjs"].Pie.prototype = {
  "constructor": function () {},
  "__reactAutoBindPairs": function () {},
  "getInitialState": function () {},
  "render": function () {},
  "componentDidMount": function () {},
  "componentWillUnmount": function () {},
  "componentWillReceiveProps": function () {},
  "initializeChart": function () {},
  "getChart": function () {},
  "getCanvass": function () {},
  "getCanvas": function () {},
  "clear": function () {},
  "stop": function () {},
  "resize": function () {},
  "toBase64Image": function () {},
  "generateLegend": function () {},
  "update": function () {},
  "addData": function () {},
  "removeData": function () {},
  "getSegmentsAtEvent": function () {},
  "mixins": function () {},
  "statics": function () {},
  "propTypes": function () {},
  "contextTypes": function () {},
  "childContextTypes": function () {},
  "getDefaultProps": function () {},
  "getChildContext": function () {},
  "componentWillMount": function () {},
  "shouldComponentUpdate": function () {},
  "componentWillUpdate": function () {},
  "componentDidUpdate": function () {},
  "updateComponent": function () {},
  "isReactComponent": function () {},
  "setState": function () {},
  "forceUpdate": function () {},
  "replaceState": function () {},
  "isMounted": function () {}
};
window["react-chartjs"].PolarArea.prototype = {
  "constructor": function () {},
  "__reactAutoBindPairs": function () {},
  "getInitialState": function () {},
  "render": function () {},
  "componentDidMount": function () {},
  "componentWillUnmount": function () {},
  "componentWillReceiveProps": function () {},
  "initializeChart": function () {},
  "getChart": function () {},
  "getCanvass": function () {},
  "getCanvas": function () {},
  "clear": function () {},
  "stop": function () {},
  "resize": function () {},
  "toBase64Image": function () {},
  "generateLegend": function () {},
  "update": function () {},
  "addData": function () {},
  "removeData": function () {},
  "getSegmentsAtEvent": function () {},
  "mixins": function () {},
  "statics": function () {},
  "propTypes": function () {},
  "contextTypes": function () {},
  "childContextTypes": function () {},
  "getDefaultProps": function () {},
  "getChildContext": function () {},
  "componentWillMount": function () {},
  "shouldComponentUpdate": function () {},
  "componentWillUpdate": function () {},
  "componentDidUpdate": function () {},
  "updateComponent": function () {},
  "isReactComponent": function () {},
  "setState": function () {},
  "forceUpdate": function () {},
  "replaceState": function () {},
  "isMounted": function () {}
};
window["react-chartjs"].Radar.prototype = {
  "constructor": function () {},
  "__reactAutoBindPairs": function () {},
  "getInitialState": function () {},
  "render": function () {},
  "componentDidMount": function () {},
  "componentWillUnmount": function () {},
  "componentWillReceiveProps": function () {},
  "initializeChart": function () {},
  "getChart": function () {},
  "getCanvass": function () {},
  "getCanvas": function () {},
  "clear": function () {},
  "stop": function () {},
  "resize": function () {},
  "toBase64Image": function () {},
  "generateLegend": function () {},
  "update": function () {},
  "addData": function () {},
  "removeData": function () {},
  "getPointsAtEvent": function () {},
  "mixins": function () {},
  "statics": function () {},
  "propTypes": function () {},
  "contextTypes": function () {},
  "childContextTypes": function () {},
  "getDefaultProps": function () {},
  "getChildContext": function () {},
  "componentWillMount": function () {},
  "shouldComponentUpdate": function () {},
  "componentWillUpdate": function () {},
  "componentDidUpdate": function () {},
  "updateComponent": function () {},
  "isReactComponent": function () {},
  "setState": function () {},
  "forceUpdate": function () {},
  "replaceState": function () {},
  "isMounted": function () {}
};
